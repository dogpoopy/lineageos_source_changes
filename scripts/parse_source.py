import os
import subprocess
import datetime
from lxml import etree
import shutil
import html

# Config
manifest_file = "workspace/source_manifest.xml"
output_file = "README.md"
since_date = (datetime.datetime.now(datetime.UTC) - datetime.timedelta(days=10)).strftime("%Y-%m-%d")
temp_dir = "temp_repos"

# Prepare workspace
os.makedirs(temp_dir, exist_ok=True)

# Parse manifest
tree = etree.parse(manifest_file)
root = tree.getroot()

# Build remotes mapping
remotes = {}
default_tag = root.find("default")
if default_tag is None:
    raise ValueError("‚ùå No <default> tag found in manifest.")

default_remote = default_tag.attrib["remote"]
default_revision = default_tag.attrib["revision"]

for remote in root.findall("remote"):
    name = remote.attrib.get("name")
    fetch = remote.attrib.get("fetch")
    if name and fetch:
        if fetch == "..":
            fetch = "https://github.com/"
        remotes[name] = fetch

with open(output_file, "w") as out:
    out.write("## üìú LineageOS Source Changes (Last 10 Days)\n\n")

    for project in root.findall("project"):
        name = project.attrib["name"]
        path = project.attrib.get("path", name)
        revision = project.attrib.get("revision", default_revision)
        remote_name = project.attrib.get("remote", default_remote)
        remote_fetch = remotes.get(remote_name)

        if not remote_fetch:
            print(f"‚ö†Ô∏è Skipping {name}: unknown remote '{remote_name}'")
            continue

        if "android.googlesource.com" in remote_fetch:
            print(f"üîç Skipping {name}: android.googlesource.com remote")
            continue

        if not remote_fetch.endswith("/"):
            remote_fetch += "/"

        org_prefix = remote_fetch.rstrip("/").split("/")[-1] + "/"
        repo_name = name[len(org_prefix):] if name.startswith(org_prefix) else name

        repo_url = f"{remote_fetch}{repo_name}.git"
        repo_path = os.path.join(temp_dir, path.replace("/", "_"))

        print(f"üì¶ Checking {repo_url} for ref '{revision}'...")
        branch_check_cmd = ["git", "ls-remote", repo_url, revision]
        branch_result = subprocess.run(branch_check_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        if branch_result.returncode != 0:
            print(f"‚ùå Failed to query refs for {name}")
            print(f"üëâ Error: {branch_result.stderr.strip()}")
            continue

        if not branch_result.stdout.strip():
            print(f"‚ö†Ô∏è Skipping {name}: ref '{revision}' not found")
            continue

        clone_target = revision
        if revision.startswith("refs/heads/"):
            clone_target = revision.replace("refs/heads/", "")
        elif revision.startswith("refs/tags/"):
            clone_target = revision.replace("refs/tags/", "")

        print(f"üå± Ref exists ‚Äî cloning {repo_url} (target: {clone_target})...")

        clone_cmd = [
            "git", "clone", "--filter=blob:none", "--no-checkout", "--depth=50",
            "--branch", clone_target, "--single-branch", repo_url, repo_path
        ]
        result = subprocess.run(clone_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if result.returncode != 0:
            print(f"‚ùå Failed to clone {name}")
            print(f"üëâ Repo URL: {repo_url}")
            print(f"üëâ Error: {result.stderr.strip()}")
            continue

        subprocess.run(["git", "-C", repo_path, "config", "--local", "gc.auto", "0"])

        try:
            log_cmd = [
                "git", "-C", repo_path, "log",
                f'--since={since_date}',
                '--pretty=format:%h|%s|%an|%cd'
            ]
            log_output = subprocess.check_output(log_cmd, text=True).strip()

            if log_output:
                out.write(f"<details>\n<summary><b>{path}</b></summary>\n\n")
                for line in log_output.splitlines():
                    sha, message, author, date = line.split("|", 3)
                    message = html.escape(message)
                    commit_url = f"{remote_fetch}{repo_name}/commit/{sha}"
                    out.write(f"- [{sha}]({commit_url}) {message}\n")
                    out.write(f"  \n  Author: {author}  \n")
                    out.write(f"  Date: {date}\n\n")
                out.write("\n</details>\n\n")

        except subprocess.CalledProcessError:
            print(f"No recent commits for {name}")

        shutil.rmtree(repo_path, ignore_errors=True)

with open(output_file, "a") as out:
    out.write("---\n\n")
    out.write("_Auto-generated by GitHub Actions. Displays recent LineageOS source commit activity for development reference._\n")

print("‚úÖ Source activity updated.")
